
fonction init() retourne listeCirculaire
Debut
  Avec
  //initialisation de la liste
  liste : pointeur liste circulaire
  liste <- nouveau listeCirculaire
  (contenu liste).tete <- null

  retourne contenu liste
Fin

procédure consulterChaine(liste : listeCirculaire)
Debut
  Avec
    si ( adresse liste.tete = null) alors
      afficher "La liste est vide"
    sinon
      parcours : pointeur maillon <- adresse liste.tete

      //on parcours toute la liste
      tant que ((contenu parcours).suivant != adresse liste.tete) faire
        afficher (contenu parcours).numero
        parcours <- (contenu parcours).suivant
      fin faire
      afficher (contenu parcours).numero
    fin si
Fin

procedure retirerMaillonTete(liste : pointeur listeCirculaire){
  si ( (contenu liste).tete == null) alors
    Afficher "La liste est vide."
    Retour a la ligne
  sinon
    //si il n'y a qu'un seul maillon dans la liste
    si (longueurListe((contenu liste), (contenu liste).tete) = 1) alors
      detruire (contenu liste).tete
      (contenu liste).tete = nullptr
    //si il y a plus d'un maillon dans la liste
    sinon
      //on se positionne sur le dernier maillon et sur le maillon suivant de la tete
      suivantTete : pointeur maillon
      suivantTete = (contenu (contenu liste).tete).suivant

      dernier : pointeur maillon
      dernier = (contenu liste).tete
      tant que ((contenu dernier).suivant != (contenu liste).tete) faire
        dernier = (contenu dernier).suivant
      fin faire

      //on fait pointer notre nouveau maillon sur le suivant de la tete
      (contenu dernier).suivant = suivantTete

      //on libere la memoire de la tete et on la redirige
      detruire (contenu liste).tete
      (contenu liste).tete = suivantTete
    fin si
  fin si
Fin retirerMaillonTete

procédure rotationCirculaire(liste : pointeur listeCirculaire)
Debut
  //lorsque la liste contient 0 ou 1 maillon, iln'y a pas de rotation a faire
  si ( longueurListe((contenu liste), (contenu liste).tete) <=1 ) alors
    Afficher "rotation impossible"
  sinon
    //on replace notre tete de file vers le suivant
    (contenu liste).tete <- (contenu (contenu liste).tete).suivant
  fin si
Fin

procédure insererMaillon(liste : pointeur listeCirculaire, valeur : entier)
Debut
  Avec
    si ((contenu liste).tete = null) alors
      tete : pointeur maillon <- nouveau maillon
      (contenu tete).numero <- valeur
      (contenu tete).suivant <- adresse tete
      (contenu liste).tete <- adresse tete
    sinon
      //preparation du nouveau maillon a inserer
      nouvMaillon : pointeur maillon <- nouveau maillon
      (contenu nouvMaillon).numero <- valeur
      (contenu nouvMaillon).suivant <- (contenu liste).tete

      //on parcours la liste jusqu'à atteindre l'avant dernier de notre listeCirculaire
      dernier : pointeur maillon <- (contenu liste).tete
      tant que ((contenu dernier).suivant != (contenu liste).tete) faire
        adresse dernier <- (contenu dernier).suivant
      fin faire

      //on met en place le nouveau maillon entre l'avant dernier et le premier, et on redirige la tete de file
      //vers ce nouveau maillon
      (contenu dernier).suivant <- adresse nouvMaillon
      (contenu liste).tete <- adresse nouvMaillon
    fin si
Fin

fonction longueurListe(liste : listeCirculaire, maillon : pointeur maillon) retourne entier
debut
  Avec
    // parcours de la liste
    si (adresse liste.tete = null) alors
      retourne 0
    sinon si ((contenu maillon).suivant != adresse liste.tete ) alors
      retourne ( 1 + longueurListe(liste , (contenu maillon).suivant))
    sinon
      retourne 1
    fin si

Fin
